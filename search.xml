<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Leetcode2--两数相加</title>
      <link href="/2020/02/13/Leetcode2-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/"/>
      <url>/2020/02/13/Leetcode2-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode2–两数相加"><a href="#LeetCode2–两数相加" class="headerlink" title="LeetCode2–两数相加"></a>LeetCode2–两数相加</h1><p>给出两个非空的链表用来表示两个非负的整数。其中，它们各自的位数是按照逆序的方式存储的，并且它们的每个节点只能存储一位数字。<br>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。<br>您可以假设除了数字0之外，这两个数都不会以0开头。</p><p>示例：<br>输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br>输出：7 -&gt; 0 -&gt; 8<br>原因：342 + 465 = 807</p><p>思路：将两组链表看成是长度相等的进行遍历，如果一个链表较短则在前面补0，每一位计算的同时要考虑上一位是否有进位，如果相加sum超过10，则进位数carry=sum/10。</p><h2 id="Java语言"><a href="#Java语言" class="headerlink" title="Java语言"></a>Java语言</h2><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition <span class="keyword">for</span> singly-linked list.</span><br><span class="line"> * <span class="keyword">public</span> <span class="keyword">class</span> ListNode &#123;</span><br><span class="line"> *     <span class="built_in">int</span> val;</span><br><span class="line"> *     ListNode <span class="keyword">next</span>;</span><br><span class="line"> *     ListNode(<span class="built_in">int</span> x) &#123; val = x; &#125;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">class</span> Solution &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode addTwoNumbers(ListNode l1, ListNode l2) &#123;</span><br><span class="line">        ListNode pre = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode cur = pre;</span><br><span class="line">        <span class="built_in">int</span> carry = <span class="number">0</span>; </span><br><span class="line">        <span class="keyword">while</span>(l1 != <span class="literal">null</span> || l2 != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">int</span> x = l1 == <span class="literal">null</span> ? <span class="number">0</span> : l1.val;</span><br><span class="line">            <span class="built_in">int</span> y = l2 == <span class="literal">null</span> ? <span class="number">0</span> : l2.val;</span><br><span class="line">            <span class="built_in">int</span> sum = x + y + carry;</span><br><span class="line">            </span><br><span class="line">            carry = sum / <span class="number">10</span>;</span><br><span class="line">            sum = sum % <span class="number">10</span>;</span><br><span class="line">            cur.<span class="keyword">next</span> = <span class="keyword">new</span> ListNode(sum);</span><br><span class="line"></span><br><span class="line">            cur = cur.<span class="keyword">next</span>;</span><br><span class="line">            <span class="keyword">if</span>(l1 != <span class="literal">null</span>)</span><br><span class="line">                l1 = l1.<span class="keyword">next</span>;</span><br><span class="line">            <span class="keyword">if</span>(l2 != <span class="literal">null</span>)</span><br><span class="line">                l2 = l2.<span class="keyword">next</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(carry == <span class="number">1</span>) &#123;</span><br><span class="line">            cur.<span class="keyword">next</span> = <span class="keyword">new</span> ListNode(carry);</span><br><span class="line">        &#125;</span><br><span class="line">        return pre.<span class="keyword">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h2><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition <span class="keyword">for</span> singly-linked list.</span><br><span class="line"> * struct ListNode &#123;</span><br><span class="line"> *     int val;</span><br><span class="line"> *     struct ListNode *<span class="keyword">next</span>;</span><br><span class="line"> * &#125;;</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) &#123;</span><br><span class="line">    //head用于返回</span><br><span class="line">    struct ListNode*<span class="built_in"> head</span>=(struct ListNode*)malloc(sizeof(struct ListNode));</span><br><span class="line">    struct ListNode*<span class="built_in"> tail</span><span class="built_in">=head</span>;</span><br><span class="line">    int<span class="built_in"> count</span>=<span class="number">0</span><span class="built_in">,sum</span>=<span class="number">0</span>;</span><br><span class="line">    //sum用来判断是否需要进位,如果需要进<span class="built_in">位sum</span>自减<span class="number">10</span><span class="built_in">,count</span>值<span class="number">1</span>用于和下一位相加</span><br><span class="line">    <span class="keyword">for</span>(;l1&amp;&amp;l2;l1=l1-&gt;<span class="keyword">next</span>,l2=l2-&gt;<span class="keyword">next</span>)&#123;</span><br><span class="line">       <span class="built_in"> sum</span>=l1-&gt;val+l2-&gt;val<span class="built_in">+count</span>;</span><br><span class="line">        //判断是否进位</span><br><span class="line">        <span class="keyword">if</span><span class="built_in">(sum</span>&gt;<span class="number">9</span>)&#123;</span><br><span class="line">           <span class="built_in"> sum</span>-=<span class="number">10</span>;</span><br><span class="line">           <span class="built_in"> count</span>=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">           <span class="built_in"> count</span>=<span class="number">0</span>;</span><br><span class="line">       <span class="built_in"> tail</span>-&gt;<span class="keyword">next</span>=(struct ListNode*)malloc(sizeof(struct ListNode));</span><br><span class="line">       <span class="built_in"> tail</span><span class="built_in">=tail</span>-&gt;<span class="keyword">next</span>;</span><br><span class="line">       <span class="built_in"> tail</span>-&gt;val<span class="built_in">=sum</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    //求出两个链表中没有走完的链表,如果有将链表剩余部分加在新链表的后边</span><br><span class="line">    //注意也需要判断进位问题</span><br><span class="line">    l1 = l1?l1:l2;</span><br><span class="line">    <span class="keyword">for</span>(;l1;l1=l1-&gt;<span class="keyword">next</span>)&#123;</span><br><span class="line">       <span class="built_in"> sum</span>=l1-&gt;val<span class="built_in">+count</span>;</span><br><span class="line">        <span class="keyword">if</span><span class="built_in">(sum</span>&gt;<span class="number">9</span>)&#123;</span><br><span class="line">           <span class="built_in"> sum</span>-=<span class="number">10</span>;</span><br><span class="line">           <span class="built_in"> count</span>=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">           <span class="built_in"> count</span>=<span class="number">0</span>;</span><br><span class="line">       <span class="built_in"> tail</span>-&gt;<span class="keyword">next</span>=(struct ListNode*)malloc(sizeof(struct ListNode));</span><br><span class="line">       <span class="built_in"> tail</span><span class="built_in">=tail</span>-&gt;<span class="keyword">next</span>;</span><br><span class="line">       <span class="built_in"> tail</span>-&gt;val<span class="built_in">=sum</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    //判断最后一位是否需要进位</span><br><span class="line">    <span class="keyword">if</span><span class="built_in">(count</span>)&#123;</span><br><span class="line">       <span class="built_in"> tail</span>-&gt;<span class="keyword">next</span>=(struct ListNode*)malloc(sizeof(struct ListNode));</span><br><span class="line">       <span class="built_in"> tail</span><span class="built_in">=tail</span>-&gt;<span class="keyword">next</span>;</span><br><span class="line">       <span class="built_in"> tail</span>-&gt;val<span class="built_in">=count</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    //返回链表的尾节点</span><br><span class="line">   <span class="built_in"> tail</span>-&gt;<span class="keyword">next</span>=NULL;</span><br><span class="line">   <span class="built_in"> tail</span><span class="built_in">=head</span>;</span><br><span class="line">   <span class="built_in"> head</span><span class="built_in">=head</span>-&gt;<span class="keyword">next</span>;</span><br><span class="line">    free<span class="built_in">(tail</span>);</span><br><span class="line">    <span class="keyword">return</span><span class="built_in"> head</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基本指令</title>
      <link href="/2020/02/09/Linux%E5%9F%BA%E6%9C%AC%E6%8C%87%E4%BB%A4/"/>
      <url>/2020/02/09/Linux%E5%9F%BA%E6%9C%AC%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux实用指令篇"><a href="#Linux实用指令篇" class="headerlink" title="Linux实用指令篇"></a>Linux实用指令篇</h1><p>最近闲来无事，复习了一下Linux中的一些基本指令，并与诸君分享一下。</p><h2 id="1-帮助指令"><a href="#1-帮助指令" class="headerlink" title="1.帮助指令"></a>1.帮助指令</h2><p>man指令用于获取帮助信息<br>比如：查看ls命令的帮助信息</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">man</span> <span class="keyword">ls</span></span><br></pre></td></tr></table></figure><p>help指令可以获取shell内置命令的帮助信息<br>比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">help</span> <span class="built_in">cd</span></span><br></pre></td></tr></table></figure><h2 id="2-文件与目录相关的指令"><a href="#2-文件与目录相关的指令" class="headerlink" title="2.文件与目录相关的指令"></a>2.文件与目录相关的指令</h2><p>pwd指令用于显示当前工作目录的绝对路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pwd</span></span><br></pre></td></tr></table></figure><p>ls指令用于查看该目录下的文件列表</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ls</span></span><br></pre></td></tr></table></figure><p>cd指令用于切换到指定目录</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/home</span></span><br></pre></td></tr></table></figure><p>mkdir指令用于创建指定目录</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /<span class="built_in">home</span>/pig <span class="comment">//创建单级目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /<span class="built_in">home</span>/animal/dog <span class="comment">//创建多级目录</span></span><br></pre></td></tr></table></figure><p>rmdir指令用于删除指定目录</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rmdir</span> /<span class="built_in">home</span>/pig <span class="comment">//rmdir删除的是一个空目录</span></span><br><span class="line">rm /<span class="built_in">home</span>/aaa.txt  <span class="comment">//删除home下的aaa.txt</span></span><br><span class="line">rm -r /<span class="built_in">home</span>/pig <span class="comment">//删除非空目录，删除带提示</span></span><br><span class="line">rm -rf /<span class="built_in">home</span>/pig <span class="comment">//删除非空目录，强制删除不带提示</span></span><br></pre></td></tr></table></figure><p>touch指令用于创建空文件，也可以更新文件的修改时间</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">touch</span> <span class="selector-tag">aaa</span><span class="selector-class">.txt</span></span><br></pre></td></tr></table></figure><p>cp指令，顾名思义，是复制拷贝指令。<br>其基本语法：cp [选项] [源文件] [目的文件]</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp aaa.txt <span class="string">/home/pig</span>  <span class="string">//</span>将home目录下的aaa.txt拷贝到pig文件中</span><br><span class="line">cp -r <span class="string">/home/</span> <span class="string">/opt/</span>   <span class="string">//</span>将整个<span class="string">/home</span>递归复制到opt目录下</span><br></pre></td></tr></table></figure><p>mv指令用于移动文件与目录或者重命名</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv bbb<span class="selector-class">.txt</span> ddd<span class="selector-class">.txt</span>  <span class="comment">//将bbb.txt重新命名为ddd.txt</span></span><br><span class="line">mv bbb<span class="selector-class">.txt</span> /root/   <span class="comment">//将bbb.txt移动到root目录下</span></span><br></pre></td></tr></table></figure><p>cat指令用于查看文件内容<br>(cat只能查看内容，不能修改内容)</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cat</span> /etc/profile  <span class="comment">//查看该文件目录下的内容</span></span><br><span class="line"><span class="keyword">cat</span> -<span class="keyword">n</span> /etc/profile <span class="comment">//带行号的查看</span></span><br><span class="line"><span class="keyword">cat</span> -<span class="keyword">n</span> /etc/profile | <span class="keyword">more</span> <span class="comment">//带行号的查看</span></span><br></pre></td></tr></table></figure><p>echo指令输出内容到控制台</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>head指令可以显示文件的开头部分，默认下显示的是文件的头10行</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">head /etc/profile</span><br><span class="line">head -n 7 /etc/profie</span><br></pre></td></tr></table></figure><blockquote><p>和&gt;&gt;指令分别是输出重定向和追加的功能</p></blockquote><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ls</span> -l &gt; aaa.txt  <span class="string">//</span>将列表的内容写入aaa.txt</span><br><span class="line"><span class="keyword">ls</span> -l &gt;&gt; aaa.txt <span class="string">//</span>将列表的内容写到aaa.txt文档的末尾</span><br></pre></td></tr></table></figure><p>tail指令显示文件尾部的内容，默认下显示的是文件后10行</p><figure class="highlight stan"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tail</span> /etc/profile</span><br><span class="line"><span class="built_in">tail</span> -n <span class="number">7</span> /etc/profile</span><br><span class="line"><span class="built_in">tail</span> -f dog.<span class="built_in">log</span>  <span class="comment">//追踪文档的实时更新</span></span><br></pre></td></tr></table></figure><p>history指令可以查看之前输入过的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">history</span></span><br><span class="line"><span class="built_in">history</span> 10</span><br></pre></td></tr></table></figure><p>date指令用于查看日期，设置日期</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">date </span><br><span class="line">date <span class="string">"+%Y-%m-%d"</span> //显示年月日</span><br><span class="line">date <span class="string">"+%Y-%m-%d %H:%M:%S"</span> //显示年月日时分秒</span><br><span class="line">date -<span class="keyword">s</span> 日期  //设定日期</span><br></pre></td></tr></table></figure><p>cal指令用于查看日历</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cal <span class="number">2020</span></span><br></pre></td></tr></table></figure><p>find指令用于按需求查找</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">find</span> /<span class="built_in">home</span> -name pig.txt <span class="comment">//查找文件名为pig.txt的文档</span></span><br><span class="line"><span class="built_in">find</span> /opt -user xh  <span class="comment">//查找/opt目录下，用户名为xh的文件</span></span><br><span class="line"><span class="built_in">find</span> / -<span class="built_in">size</span> +<span class="number">20</span>M <span class="comment">//查找系统中大小大于20M的文件</span></span><br></pre></td></tr></table></figure><p>locate指令用于快速定位文件的位置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">locate</span> <span class="selector-tag">pig</span><span class="selector-class">.txt</span></span><br></pre></td></tr></table></figure><p>grep指令过滤查找</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grep</span> -n <span class="keyword">if</span> <span class="regexp">/home/</span>animal <span class="comment">//查找该目录下的文件中if出现的行号和次数,区分大小写</span></span><br><span class="line"><span class="keyword">grep</span> -ni <span class="keyword">if</span> <span class="regexp">/home/</span>animal <span class="comment">//查找该目录下的文件中if出现的行号和次数，不区分大小写</span></span><br></pre></td></tr></table></figure><h2 id="3-压缩和解压缩指令"><a href="#3-压缩和解压缩指令" class="headerlink" title="3.压缩和解压缩指令"></a>3.压缩和解压缩指令</h2><p>gzip/gunzip指令</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gzip pig<span class="selector-class">.txt</span> <span class="comment">//压缩</span></span><br><span class="line">gunzip pig<span class="selector-class">.txt</span><span class="selector-class">.gz</span> <span class="comment">//解压缩</span></span><br></pre></td></tr></table></figure><p>zip/unzip指令</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zip -r myhome.zip <span class="regexp">/home/</span>  <span class="regexp">//</span>将home下的文件压缩成myhome.zip</span><br><span class="line">unzip -d <span class="regexp">/opt/</span>tmp myhome.zip  <span class="regexp">//</span>将myhome.zip压缩到<span class="regexp">/opt/</span>tmp中</span><br></pre></td></tr></table></figure><p>tar指令是打包指令，最后的文件是.tar.gz文件</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -zcvf <span class="selector-tag">a</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span> aaa<span class="selector-class">.txt</span> bbb<span class="selector-class">.txt</span> <span class="comment">//将两个.txt文件打包压缩成a.tar.gz</span></span><br><span class="line">tar -zxvf <span class="selector-tag">a</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span> <span class="comment">//将a.tar.gz解压到当前目录</span></span><br><span class="line">tar -zxvf <span class="selector-tag">a</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span> -C /home/animal <span class="comment">//将a.tar.gz解压到/home/animal中</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020,你好</title>
      <link href="/2020/01/01/2020-%E4%BD%A0%E5%A5%BD/"/>
      <url>/2020/01/01/2020-%E4%BD%A0%E5%A5%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="告别2019"><a href="#告别2019" class="headerlink" title="告别2019"></a>告别2019</h1><p>蓦然回首，2019已在灯火阑珊处。回收往事，日子竟全是斑斓的光影，记忆的屏障，曾经心动的声音已渐行渐远。多少的思念，或许只能埋藏在心底，默默的回忆。<br><img src="/2020/01/01/2020-%E4%BD%A0%E5%A5%BD/boy.jpg" alt><br>2019年，对我来说是个很有意义的年份，不仅是因为它是我的本命年，还因为这一年发生了许许多多的事情，让人难以忘却，难已释怀，唏嘘不已。或许每个人都有一段刻苦铭心的回忆，不管快乐还悲哀，都是那么耐人寻味！<br><img src="/2020/01/01/2020-%E4%BD%A0%E5%A5%BD/boy2.jpg" alt><br>过去的一年里，我们都在成长，告别了四年的大学生涯，告别了四年同窗的室友，告别了陪伴了好几年的朋友。那些日子依旧历历在目，忘不了那几年每天早上一起迟到的课，忘不了那几年一起打游戏，谈古论今熬过的夜，忘不了那几年一起看过的风景……<br><img src="/2020/01/01/2020-%E4%BD%A0%E5%A5%BD/%E5%9B%9E%E5%BF%86.jpg" alt><br>那年一起在天安门广场，感受升旗的庄严，感受国家的繁荣富强；那年一起在黄浦江畔感受这座城市魅力；那年一起看哭过的周杰伦演唱会，晴天，七里香，蒲公英的约定；那年一起在青岛度过的毕业旅行，在金沙滩柔软细腻的沙土上留下我们友谊的见证；还有那年一起在六朝古都——西安经历过的三天三夜……当岁月流转与时光轮回都无迹可循时，你会发现，它一直藏在时光长剧的背后。<br><img src="/2020/01/01/2020-%E4%BD%A0%E5%A5%BD/%E9%A3%8E%E6%99%AF1.jpg" alt><br>那个阳光明媚的早晨，在一个陌生不大的宿舍里，第一看到那几张依旧有些稚嫩的脸庞，确认过眼神，就是相处四年的哥们；那个微暖的午后，在会上，那个可爱的女孩第一次给我留下了深刻的影响，她的优秀，她的美丽……那些可爱的人儿，以各自特有的方式，装点着我的人生，点亮着我的漫漫长夜。<br><img src="/2020/01/01/2020-%E4%BD%A0%E5%A5%BD/%E9%A3%8E%E6%99%AF2.jpg" alt><br>“我是如此相信，在背后支撑的是你，一直与我并肩而行，仰望等太阳升起，听见鸟群回来的声音，为我守候的人是你，给了我坚定的信心，双手弹奏出黎明，原来爱如此的动听……”那首歌缓缓在我耳边环绕，历久铭心。<br><img src="/2020/01/01/2020-%E4%BD%A0%E5%A5%BD/girl.jpg" alt></p><h1 id="牵手2020"><a href="#牵手2020" class="headerlink" title="牵手2020"></a>牵手2020</h1><p>上帝给予我们太多梦的点滴和一首首零碎的诗，正是这些零碎的拼块构成了人生完美的拼图。看够了2019的繁花，不知不觉开始种下了2020的树种，它会在我们的日夜浇灌下，茁壮成长，最终开出美丽的花朵。<br><img src="/2020/01/01/2020-%E4%BD%A0%E5%A5%BD/1.jpg" alt></p><h1 id="心愿"><a href="#心愿" class="headerlink" title="心愿"></a>心愿</h1><p>今天是2020年的第一天，这也是我的第一支个人博客，新的一年，还有许多事情等着我，我会更加努力的，为了那个约定；那些我爱的人，你们也要变得更加强大，更加美丽，所有的愿望实现！！！<br><img src="/2020/01/01/2020-%E4%BD%A0%E5%A5%BD/%E9%A3%8E%E6%99%AF4.jpg" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> Emotion </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
